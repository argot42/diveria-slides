Introducción a Go
11 Diciembre 2020

Pablo Tesari

* Ken Thompson

.image ken.gif

: UTF-8, Unix, Plan 9 - Contribuyo a C (Dennis Ritchie), Multics, Inferno

* Rob Pike

.image rob.jpg

: UTF-8, Inferno, Limbo

* Robert Griesemer

.image griesemer.jpg

: Google's V8 JavaScript engine, the Sawzall language, the Java HotSpot virtual machine, and the Strongtalk system

* Que es Go?

Go es un leanguaje compilado de tipado estático creado en Google por Rob Pike, Ken Thompson y Robert Griesemer.

: Es un lenguaje que soporta concurrencia, recolección de basura y tiene rápidos tiempos de compilación.
: Dos de sus creadores Ken y Rob son ex empleados de Bell Labs y trabajaron en Unix y C junto con Denis Ritchie
: Según Rob Pike la motivación para la creacion de este lenguaje es ser simple, motivado por que al asistir a Lang.Next, una conferencia de Microsoft sobre lenguajes, la mayoría de las charlas eran sobre nuevas features de los lenguajes traidas de otros.
: Esto es un problema por que todos los lenguajes estan convirtiendose en un solo lenguaje
: Hay un concepto que se llama language relativity, que dice que dependiendo que lenguaje se usa afecta a tu personalidad, hay poca evidencia de esto para lenguajes naturales.
: Para los lenguajes de programación es un poco mas cierto, escribimos programas muy distintos dependiendo el tipo de lenguaje que usemos logico, procedural, funcional, etc.
: Rob pike cree que es necesario que haya diferentes lenguajes para diferentes problemas
: Los lenguajes se estan volviendo mas grandes (mas complejos) y a la vez mas similares entre ellos
: --
: --

* Un ejemplo

.play -edit helloworld.go

: Todo programa en Go comienza en el package main en la función main.

* Interfaces

.play interface.go /START OMIT/,/END OMIT/

Un tipo implementa una interfaz definiendo los métodos requeridos.

* Stringer

.code stringer.go

.link http://golang.org/pkg/fmt/#Stringer

Las interfaces en Go no necesitan *Implement* tan solo necesitan implementar un método que coincida con la *signature*.

: Las interfaces en go no necesitan implements. Como vieron en el ejemplo de más arriba el struct world no está indicando que implementa cierta interfaz
: tan solo el hecho de que tenga un método String que no recibe argumentos y devuleve una string (tiene la misma signature) ya es suficiente.
: Esto nos permite que el uso de interfaces sea fácil y que no se generen dependencias innecesarias.
: Por ejemplo el paquete time es la es la única forma de obtener el tiempo en go y por lo tanto debería mantenerse low level. Si se debería implementar explicitamente la interfaz fmt y sus dependecias deberían ser importadas para poder usar el paquete.

* Time

.play timeprint.go /START OMIT/,/END OMIT/

El paquete time no tiene que saber sobre la interfaz *Stringer* de fmt.

* Otras interfaces

.code writer.go

.link http://golang.org/pkg/io/#Writer

.code reader.go

.link http://golang.org/pkg/io/#Reader

: Estas interfaces describen lo que en unix sería write y read callsystems respectivamente.

* Web Crawler

.play webcrawler.go /START OMIT/,/END OMIT/

* Concurrency

.play concurrent-webcrawler.go /^func crawl\(/,/^}/

: los cambios que se hicieron fueron en vez de hacer el print directamente enviar el string por un channel. La flechita es el "communication operator" y concatenado al chan es una anotación que indica en que dirección esta operacion esta permitida (en este caso solo enviar).

* Cambios en Main

.play concurrent-webcrawler.go /^func main\(\)/,/^}/

: estos son los cambios en el main que se necesitan para hacer el web crawler concurrente

* Timeout

.play -edit timeout-webcrawler.go /START OMIT/,/END OMIT/

* Links interesantes

Blog oficial de Go

.link https://blog.golang.org

A Tour of Go

.link https://youtu.be/ytEkHepK08c

Simplicity is complicated 

.link https://youtu.be/rFejpH_tAHM

Concurrency is not parallelism

.link https://youtu.be/oV9rvDllKEg

Russ Cox

.link https://research.swtch.com
